#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
%\usetheme{Warsaw}
\usetheme{Boadilla}
% or ...

\usecolortheme{orchid}
\setbeamertemplate{footline}[frame number]{} % makes the footer EMPTY

\setbeamercovered{transparent}
% or whatever (possibly just delete it)
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "times" "default"
\font_sans "lmss" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Property-based Testing in Python and Rust
\end_layout

\begin_layout Author
Mulhern
\end_layout

\begin_layout Institute
Red Hat, Inc.
 + Hypothesis
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Introduction
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Who am I?
\end_layout

\begin_layout Standard
A software engineer who is deeply pessimistic.
 Consequently I am fanatical about...
\end_layout

\begin_layout Itemize
Testing
\end_layout

\begin_layout Itemize
CI
\end_layout

\begin_layout Itemize
Code Quality Tools
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Introduction
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Who am I to be Talking about Property-based Testing in Python and Rust?
\end_layout

\begin_layout Itemize
Discovered 
\emph on
property-based
\emph default
 testing early in this century (Haskell's QuickCheck
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://hackage.haskell.org/package/QuickCheck
\end_layout

\end_inset


\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
Discovered 
\emph on
Hypothesis
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://hypothesis.readthedocs.io/en/master/index.html
\end_layout

\end_inset


\end_layout

\end_inset

in Aug 2015
\end_layout

\begin_layout Itemize
Merged first Hypothesis PR in March 2016
\end_layout

\begin_layout Itemize
Gave a tech talk at Red Hat about Hypothesis in May 2016
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://developers.redhat.com/blog/2016/06/24/the-hypothesis-testing-library-for-p
ython-an-introduction/
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Merged a substantive PR into Hypothesis repo in June 2016
\end_layout

\begin_layout Itemize
Developed a Hypothesis strategy of my own in Jan 2017
\end_layout

\begin_layout Itemize
Became a Hypothesis co-maintainer in 2017
\end_layout

\begin_layout Itemize
Gave a talk about Hypothesis at Red Hat QE Camp in 2017 
\end_layout

\begin_layout Itemize
Discovered 
\emph on
proptest
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://crates.io/crates/proptest
\end_layout

\end_inset


\end_layout

\end_inset

 about six months ago
\end_layout

\begin_layout Itemize
Started working with proptest a few months ago
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Introduction
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Who am I to be Talking about Property-based Testing in Python and Rust?
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
library or application
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
my job
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
domain
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
code coverage
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pyudev
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
maintainer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
storage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
justbytes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
principal developer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
storage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
> 95%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
justbases
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
principal developer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
storage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
> 95%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hs-dbus-signature
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
principal developer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D-Bus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
69%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dbus-python-client-gen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
principal developer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D-Bus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dbus-client-gen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
principal developer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D-Bus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
into-dbus-python
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
principal developer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D- Bus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dbus-signature-pyparsing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
principal developer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D-Bus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stratisd
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
one of several
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
storage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
?
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Expectations
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
What this talk will include.
\end_layout

\begin_layout Itemize

\emph on
Extremely
\emph default
 simple code examples.
\end_layout

\begin_layout Itemize
A little bit of personal experience.
\end_layout

\begin_layout Itemize
Pointers to other sources.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Example: Example-Based Testing
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Testing a simple 
\family typewriter
convert_from_nat()
\family default
 function.
\end_layout

\begin_layout Itemize
Check that it works on 0.
\end_layout

\begin_layout Itemize
Check multiple bases.
\end_layout

\begin_layout Itemize
Check converting large values to small bases and small values to large bases.
\end_layout

\begin_layout Itemize
Check exceptions.
\end_layout

\begin_layout Itemize
etc.
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status collapsed

\begin_layout Plain Layout
A Few Simple Example-Based Tests using Pytest
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false"
inline false
status collapsed

\begin_layout Plain Layout

def test():
\end_layout

\begin_layout Plain Layout

    assert convert_from_nat(0, 2) == []
\end_layout

\begin_layout Plain Layout

    assert convert_from_nat(0, 1024) == []
\end_layout

\begin_layout Plain Layout

    assert convert_from_nat(3, 2) == [1, 1]
\end_layout

\begin_layout Plain Layout

    assert convert_from_nat(2, 3) == [2]
\end_layout

\begin_layout Plain Layout

    # ...
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Example-Based Tests are a 
\emph on
Good
\emph default
 Idea
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
They are 
\emph on
much
\emph default
 better than nothing and there is good library support in Python
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Pytest: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://pytest.org/latest/
\end_layout

\end_inset

 or the Python unittest package
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
They are an 
\emph on
implicit
\emph default
 and 
\emph on
partial
\emph default
 specification of the code they test.
\end_layout

\begin_layout Itemize
They catch a surprising number of bugs in the code they test.
\end_layout

\begin_layout Itemize
They catch regressions in new versions.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Example: Property-Based Testing (1)
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Using Hypothesis to test a simple 
\family typewriter
convert_from_nat()
\family default
 function.
\end_layout

\begin_layout Enumerate
Come up with a specification.
\end_layout

\begin_layout Enumerate
Express the specification in Python.
\end_layout

\begin_layout Enumerate
Use Hypothesis to test that the specification holds.
\end_layout

\begin_layout Theorem
\begin_inset Formula $\forall v\geq0,\forall b\geq2,\mathtt{convert\_to\_nat}(\mathtt{convert\_from\_nat}(v,b),b)=v)$
\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status collapsed

\begin_layout Plain Layout
A Simple Test Using Hypothesis
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false"
inline false
status collapsed

\begin_layout Plain Layout

@given(
\end_layout

\begin_layout Plain Layout

   value=strategies.integers(min_value=0),
\end_layout

\begin_layout Plain Layout

   base=strategies.integers(min_value=2)
\end_layout

\begin_layout Plain Layout

)
\end_layout

\begin_layout Plain Layout

def test(value, base):
\end_layout

\begin_layout Plain Layout

    result = convert_from_nat(value, base)
\end_layout

\begin_layout Plain Layout

    assert convert_to_nat(result, base) == value
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Example: Property-Based Testing (2)
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Using Hypothesis to test a simple 
\family typewriter
convert_from_nat()
\family default
 function.
\end_layout

\begin_layout Theorem
\begin_inset Formula $\forall v\geq0,\forall b\geq2,\mathtt{convert\_from\_nat}(v,b)\;does\;not\;have\;leading\;zeros.$
\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status collapsed

\begin_layout Plain Layout
A Simple Test Using Hypothesis
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false"
inline false
status collapsed

\begin_layout Plain Layout

@given(
\end_layout

\begin_layout Plain Layout

   value=strategies.integers(min_value=0),
\end_layout

\begin_layout Plain Layout

   base=strategies.integers(min_value=2)
\end_layout

\begin_layout Plain Layout

)
\end_layout

\begin_layout Plain Layout

def test(value, base):
\end_layout

\begin_layout Plain Layout

    result = convert_from_nat(value, base)
\end_layout

\begin_layout Plain Layout

    assert result[:1] != [0]
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
What Hypothesis Does with This Test Code
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Hypothesis generates, runs, and remembers tests to check the specified propertie
s.
\end_layout

\begin_layout Enumerate
It tests your specification:
\end_layout

\begin_deeper
\begin_layout Enumerate
It makes arguments for your test functions using the strategies specified.
\end_layout

\begin_layout Enumerate
It runs tests for these arguments.
\end_layout

\begin_layout Enumerate
It reports the results, stopping on the first failure, if any.
\end_layout

\end_deeper
\begin_layout Enumerate
It remembers the arguments that caused the test to fail.
\end_layout

\begin_layout Standard
This is not a description of the implementation, just a simplified description
 of what the user experiences.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Property-Based Testing is a 
\emph on
Great
\emph default
 Idea
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Especially with Hypothesis
\end_layout

\begin_layout Standard
Hypothesis tests:
\end_layout

\begin_layout Itemize
are an 
\emph on
explicit
\emph default
 and 
\emph on
partial
\emph default
 specification of the code they test.
\end_layout

\begin_layout Itemize
more tests with less test code
\end_layout

\begin_layout Itemize
employ code reuse in the choice of examples
\end_layout

\begin_layout Itemize
favor examples that previously failed, enabling a simple-minded approach
 to debugging
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Does not work with CI, but nice when debugging on a personal machine.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
are highly configurable
\end_layout

\begin_layout Itemize
and so much more
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Property-Based Testing is not Easy
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Even with Hypothesis, the upfront costs are higher than with unit testing.
\end_layout

\begin_layout Standard
A partial list of difficulties:
\end_layout

\begin_layout Itemize
It may be difficult to come up with a useful specification
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
You can always cheat with example-based tests.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
It may be difficult, impossible, or perhaps pointless to express the specificati
on in Hypothesis.
\end_layout

\begin_layout Itemize
It may be hard to test the specification in a reasonable amount of time.
\end_layout

\begin_layout Itemize
It may be that Hypothesis does not have a strategy for generating the values
 needed as arguments to the specification
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Hypothesis has some strategies for composing other strategies; I had used
 Hypothesis for about 18 months before I felt the need to develop a purpose-buil
t strategy.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
But the gains are, typically, very great.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
I Was Wrong...
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
I used to believe that property-based testing was only good for purely functiona
l applications.
\end_layout

\begin_layout Standard
Reasons:
\end_layout

\begin_layout Itemize
I was first introduced to property-based testing in Haskell
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Haskell's QuickCheck is the original implementation of this idea.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Examples are typically in mathematics or Haskelly sorts of applications.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
...but Now I Know Better
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
I have used Hypothesis successfully with pyudev, a library that wraps libudev.
\end_layout

\begin_layout Standard
When I took over this library from the original developer, I found that
 they had been using property-based testing all along! All I needed to do
 was Hypothesize it.
\end_layout

\begin_layout Standard
Basic principles of property-based testing on libudev:
\end_layout

\begin_layout Itemize
Run on a real system, using output of 
\family typewriter
udevadm
\family default
 as oracle.
\end_layout

\begin_layout Itemize
Mock what needs to be mocked.
\end_layout

\begin_layout Itemize
Check pyudev functions against themselves.
\end_layout

\begin_layout Itemize
etc.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Example: Pyudev Hypothesis Testing
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Testing pyudev against itself 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
More examples at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/pyudev/pyudev
\end_layout

\end_inset

.
\end_layout

\end_inset

.
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status collapsed

\begin_layout Plain Layout
A Simple Test Using Hypothesis
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,basicstyle={\footnotesize},showstringspaces=false"
inline false
status collapsed

\begin_layout Plain Layout

@given(
\end_layout

\begin_layout Plain Layout

   _CONTEXT_STRATEGY,
\end_layout

\begin_layout Plain Layout

   strategies.sampled_from(_DEVICES)
\end_layout

\begin_layout Plain Layout

)
\end_layout

\begin_layout Plain Layout

@settings(max_examples=5)
\end_layout

\begin_layout Plain Layout

def test_from_name(self, a_context, a_device):       
\end_layout

\begin_layout Plain Layout

   new_device = Devices.from_name(
\end_layout

\begin_layout Plain Layout

      a_context,
\end_layout

\begin_layout Plain Layout

      a_device.subsystem,
\end_layout

\begin_layout Plain Layout

      a_device.sys_name
\end_layout

\begin_layout Plain Layout

   )
\end_layout

\begin_layout Plain Layout

   assert new_device == a_device
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock

\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Benefits of Hypothesizing the Tests
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
What was gained by using Hypothesis.
\end_layout

\begin_layout Itemize
If the test couldn't be run, usually because no device with the correct
 properties was available, get 1 skip message, not 100.
\end_layout

\begin_layout Itemize
Test code is clearer.
\end_layout

\begin_layout Itemize
Debugging is faster.
\end_layout

\begin_layout Itemize
etc.
\end_layout

\begin_layout Standard
Found a few signficant bugs in pyudev, a few significant problems in libudev,
 and a significant problem with udev DEVLINKS property in the presence of
 multipath.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout

\family typewriter
proptest
\family default
 is Pretty Good Too
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
There are two property-based testing libraries for Rust.
\end_layout

\begin_layout Itemize

\family typewriter
quickcheck
\family default
 is inspired by Haskell's QuickCheck, 
\family typewriter
proptest
\family default
 by Hypothesis
\end_layout

\begin_deeper
\begin_layout Itemize
The fundamental difference is in how counter-examples are minimized
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
quickcheck
\family default
 is older, but 
\family typewriter
proptest
\family default
 is nicer for me
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout

\family typewriter
proptest
\family default
 is Pretty Good Too
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Imitates Hypothesis in a very different language
\end_layout

\begin_layout Standard
Where Hypothesis uses Python decorators, proptest uses Rust's hygenic macros.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Example: Property-Based Testing (3)
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Being a Hypothesis-alike library in Rust.
\end_layout

\begin_layout Theorem
\begin_inset Formula $\forall v\geq0,\forall b\geq2,\mathtt{convert\_to\_nat}(\mathtt{convert\_from\_nat}(v,b),b)=v)$
\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status collapsed

\begin_layout Plain Layout
A Simple Test Using proptest
\end_layout

\end_inset


\begin_inset listings
lstparams "showstringspaces=false"
inline false
status collapsed

\begin_layout Plain Layout

proptest!{
\end_layout

\begin_layout Plain Layout

    #[test]
\end_layout

\begin_layout Plain Layout

    fn test(value in any::<u64>(),
\end_layout

\begin_layout Plain Layout

            base in 2u64...std::u64::MAX) {
\end_layout

\begin_layout Plain Layout

        let result = convert_from_nat(value, base);
\end_layout

\begin_layout Plain Layout

        assert_eq!(convert_to_nat(result, base),
\end_layout

\begin_layout Plain Layout

                   value);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Summary
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Property-based testing with Hypothesis is great and it's pretty good with
 proptest, too.
\end_layout

\begin_layout Standard
For all the reasons mentioned above:
\end_layout

\begin_layout Itemize
an explicit specification
\end_layout

\begin_layout Itemize
memoization of examples that refute the specification
\end_layout

\begin_layout Itemize
code reuse
\end_layout

\begin_layout Itemize
etc.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Thanks
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Any questions or suggestions?
\end_layout

\begin_layout Standard
Please contact me about property-based testing:
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

mulhern
\begin_inset Quotes erd
\end_inset

 on various Red Hat IRC channels: #storage, #stratis, #rust and on freenode
 at #stratis-storage
\end_layout

\begin_layout Itemize
My Red Hat email is 
\begin_inset Quotes eld
\end_inset

amulhern
\begin_inset Quotes erd
\end_inset

 
\end_layout

\end_deeper
\end_body
\end_document
